destroy:
  short: >-
    Totally destroys the storr by telling the driver to destroy all
    the data and then deleting the driver.  This will remove all data
    and cannot be undone.

flush_cache:
  short: >-
    Flush the temporary cache of objects that accumulates as the storr
    is used.  Should not need to be called often.

set:
  short: >-
    Set a key to a value.
  params:
    key: The key name.  Can be any string.
    namespace: >-
      An optional namespace.  By default the default namespace that
      the storr was created with will be used (by default that is
      "objects").  Different namespaces allow different types of
      objects to be stored without risk of names colliding.  Use of
      namespaces is optional, but if used they must be a string.
    value: >-
      Any R object to store.  The object will generally be serialised
      (this is not actually true for the environment storr) so only
      objects that would usually be expected to survive a
      \code{saveRDS}/\code{readRDS} roundtrip will work.  This
      excludes Rcpp modules objects, external pointers, etc.  But any
      "normal" R object will work fine.
    use_cache: &use_cache >-
      Use the internal cache to avoid reading or writing to the
      underlying storage if the data has already been seen (i.e., we
      have seen the hash of the object before).
  value: >-
    Invisibly, the hash of the saved object.

set_by_value:
  short: >-
    Like \code{set} but saves the object with a key that is the same
    as the hash of the object.  Equivalent to
    \code{$set(digest::digest(value), value)}.
  params:
    value: An R object to save, with the same limitations as \code{set}.
    namespace: Optional namespace to save the key into.
    use_cache: *use_cache

get:
  short: >-
    Retrieve an object from the storr.  If the requested value is not
    found then a \code{KeyError} will be raised (an R error, but can be
    caught with \code{tryCatch}; see the "storr" vignette).
  params:
    key: &key_get The name of the key to get.
    namespace: &ns_get Optional namespace to look for the key within.
    use_cache: *use_cache
get_hash:
  short: >-
    Retrieve the hash of an object stored in the storr (rather than
    the object itself).
  params:
    key: *key_get
    namespace: *ns_get
del:
  short: Delete an object fom the storr.
  params:
    key: &key The name of the key
    namespace: &ns The namespace of the key.
  value: \code{TRUE} if an object was deleted, \code{FALSE} otherwise.
clear:
  short: >-
    Clear a storr.  This function might be slow as it will iterate
    over each key.  Future versions of storr might allow drivers to
    implement a bulk clear method that will allow faster clearing.
  params:
    namespace: >-
      A namespace, to clear a single namespace, or \code{NULL} to
      clear all namespaces.
exists:
  short: Test if a key exists within a namespace
  params:
    key: *key
    namespace: *ns
exists_object:
  short: Test if an object with a given hash exists within the storr
  params:
    hash: Hash to test
gc:
  short: >-
    Garbage collect the storr.  Because keys do not directly map to
    objects, but instead map to hashes which map to objects, it is
    possible that hash/object pairs can persist with nothing pointing
    at them.  Running \code{gc} will remove these objects from the
    storr.
get_value:
  short: >-
    Get the content of an object given its hash.
  params:
    hash: The hash of the object to retrieve.
    use_cache: *use_cache
  value: The object if it is present, otherwise throw a \code{HashError}.
set_value:
  short: >-
    Add an object value, but don't add a key.  You will not need to
    use this very often, but it is used internally.
  params:
    value: An R object to set.
    use_cache: *use_cache
  value: Invisibly, the hash of the object.
list:
  short: >-
    List all keys stored in a namespace.
  params:
    namespace: The namespace to list keys within.
  value: &sorted_char A sorted character vector (possibly zero-length).
list_hashes:
  short: List all hashes stored in the storr
  value: *sorted_char
list_namespaces:
  short: List all namespaces known to the database
  value: *sorted_char

import:
  short: Import R objects from an environment.
  params:
    src: >-
      Object to import objects from; can be a list, environment or
      another storr.
    list: >-
      Names of of objects to import (or \code{NULL} to import all
      objects in \code{envir}.  If given it must be a character
      vector.  If named, the names of the character vector will be the
      names of the objects as created in the storr.
    namespace: >-
      Namespace to get objects from, and to put objects into.  If
      \code{NULL}, all namespaces from \code{src} will be imported.
      If named, then the same rule is followed as \code{list};
      \code{namespace = c(a = b)} will import the contents of
      namespace \code{b} as namespace \code{a}.
    skip_missing: >-
      Logical, indicating if missing keys (specified in \code{list})
      should be skipped over, rather than being treated as an error
      (the default).

export:
  short: Export objects from the storr into something else.
  params:
    dest: >-
      A target destination to export objects to; can be a list,
      environment, or another storr.  Use \code{list()} to export to a
      brand new list, or use \code{as.list(object)} for a shorthand.
    list: >-
      Names of objects to export, with the same rules as \code{list}
      in \code{$import}.
    namespace: >-
      Namespace to get objects from, and to put objects into.  If
      \code{NULL}, then this will export namespaces from this (source)
      storr into the destination; if there is more than one
      namespace,this is only possible if \code{dest} is a storr
      (otherwise there will be an error).
    skip_missing: >-
      Logical, indicating if missing keys (specified in \code{list})
      should be skipped over, rather than being treated as an error
      (the default).
  value: >-
    Invisibly, \code{dest}, which allows use of \code{e <-
    st$export(new.env())} and \code{x <- st$export(list())}.

archive_export:
  short: >-
    Export objects from the storr into a special "archive" storr,
    which is an \code{\link{storr_rds}} with name mangling turned on
    (which encodes keys with base64 so that they do not voilate
    filesystem naming conventions).
  params:
    path: Path to create the storr at; can exist already.
    names: As for \code{$export}
    namespace: >-
      Namespace to get objects from.  If \code{NULL}, then exports all
      namespaces found in this (source) storr.

archive_import:
  short: >-
    Inverse of \code{archive_export}; import objects from a storr that
    was created by \code{archive_export}.
  params:
    path: Path of the exported storr.
    names: As for \code{$import}
    namespace: >-
      Namespace to import objects into.  If \code{NULL}, then imports
      al namespaces from the source storr.
