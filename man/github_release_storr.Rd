% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/github_releases.R
\name{github_release_storr}
\alias{github_release_storr}
\alias{github_release_storr_del}
\alias{github_release_storr_get}
\alias{github_release_storr_info}
\alias{github_release_storr_path}
\alias{github_release_storr_version_current}
\alias{github_release_storr_versions}
\alias{github_release_url}
\alias{github_release_versions}
\title{Fetch and cache github release files}
\usage{
github_release_storr(info)

github_release_storr_info(repo, filename, read, name = basename(repo),
  path = NULL, leading_v = TRUE)

github_release_storr_get(info, version = NULL)

github_release_storr_versions(info, type = "local")

github_release_storr_version_current(info, type = "local")

github_release_storr_del(info, version)

github_release_versions(info)

github_release_url(info)

github_release_storr_path(name)
}
\arguments{
\item{info}{Result of running \code{github_release_storr}.}

\item{repo}{Name of the github repository, in format
  username/repository (e.g., \code{richfitz/storr}).}

\item{filename}{Name of the filename on a release.  Future
  versions of this may support multiple filenames - please let me
  know if that would be useful.}

\item{read}{Function to use to read the file.  Must take the
  filename of a downloaded file as an argument.  For example,
  \code{read.csv} would be appropriate to read in csv file
  (provided you like the default treatment of
  \code{stringsAsFactors}).}

\item{name}{Name to call this storr.  defaults to the repository
  name, but can be configured.  This is used to determine the name
  to save the cached data into.}

\item{path}{Optional pathin which to store the data.  If omitted,
  we use \code{rappdirs} to generate a reasonable path.  See
  \code{github_release_storr_path(name)} to see what would be
  used.}

\item{leading_v}{Logical: indicates if versions contain a leading
'v' (e.g., \code{v0.1.0} rather than \code{0.1.0}).  The default
assumes a leading v, following github's suggestions of how to
make releases, but by specifying \code{leading_v=FALSE} this can
be relaxed.}

\item{version}{For \code{github_release_version_get}; version of
the data to download.  For \code{github_release_del}, the
version to delete.  \code{NULL} is treated differently for the
two functions: for \code{get}, \code{NULL} means get the most
recent version (according to
\code{github_release_storr_version_current}), but for \code{del}
it means delete \emph{all} versions, and the storr directory
itself).}

\item{type}{Type of version numbers to download: \code{local}
returns locally downloaded versions, while \code{github} returns
versions on github (will be looked up once per session only).
The exception is for \code{github_release_storr_version_current}
which, given \code{type="local"} will fall back on trying github
if the local storr is empty.}
}
\description{
Support for caching results of github releases.
}
\details{
This requires a number of things from the underlying github
releases.  Versions must be stored using \emph{numeric} versions;
no \code{v0.1.0-beta2} style tags are allowed (this will currently
throw an error but future versions might allow skipping over
them).  Versions are assumed to start with a leading \code{v}, so
\code{v0.1.0} rather than \code{0.1.0} (but see the
\code{leading_v} argument which relaxes this) Each release is
assumed to have a \emph{single} file that we can load into R.  If
you need multiple files the current workaround is to use a zip
file as the single file to fetch and unpack that as the first
step.

This might broaden out to allow uses of other sorts of storr
objects at some point, but for now it's pretty heavily tailored
towards the external storr, stored using an rds file in a
directory determined by \code{rappdirs}.

These functions are designed for use only by authors of packages
that want to use the github release pattern to distribute
versioned data.  A blog post or publication about this is
forthcoming.
}

