% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/github_releases.R
\name{github_release_storr}
\alias{github_release_storr}
\alias{github_release_storr_del}
\alias{github_release_storr_get}
\alias{github_release_storr_info}
\alias{github_release_storr_version_current}
\alias{github_release_storr_versions}
\title{Fetch and cache github release files}
\usage{
github_release_storr(info)

github_release_storr_info(repo, filename, read, name = basename(repo))

github_release_storr_get(info, version = NULL)

github_release_storr_versions(info, type = "local")

github_release_storr_version_current(info, type = "local")

github_release_storr_del(info, version)
}
\arguments{
\item{info}{Result of running \code{github_release_storr}.}

\item{repo}{Name of the github repository, in format
username/repository (e.g., \code{richfitz/storr}).}

\item{filename}{Name of the filename on a release.  Future
versions of this may support multiple filenames - please let me
know if that would be useful.}

\item{read}{Function to use to read the file.  Must take the
filename of a downloaded file as an argument.  For example,
\code{read.csv} would be appropriate to read in csv file
(provided you like the default treatment of
\code{stringsAsFactors}).}

\item{name}{Name to call this storr.  defaults to the repository
name, but can be configured.  This is used to determine the name
to save the cached data into.}

\item{version}{For \code{github_release_version_get}; version of
the data to download.  For \code{github_release_del}, the
version to delete.  \code{NULL} is treated differently for the
two functions: for \code{get}, \code{NULL} means get the most
recent version (according to
\code{github_release_storr_version_current}), but for \code{del}
it means delete \emph{all} versions, and the storr directory
itself).}

\item{type}{Type of version numbers to download: \code{local}
returns locally downloaded versions, while \code{github} returns
versions on github (will be looked up once per session only).
The exception is for \code{github_release_storr_version_current}
which, given \code{type="local"} will fall back on trying github
if the local storr is empty.}
}
\description{
Support for caching results of github releases.
}
\details{
This might broaden out to allow uses of other sorts of storr
objects at some point, but for now it's pretty heavily tailored
towards the external storr, stored using an rds file in a
directory determined by \code{rappdirs}.

These functions are designed for use only by authors of packages
that want to use the github release pattern to distribute
versioned data.  A blog post or publication about this is
forthcoming.
}

